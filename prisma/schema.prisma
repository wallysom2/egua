generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
  @@index([createdById], map: "Post_createdById_fkey")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String         @default("user")
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  progress      UserProgress[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Lesson {
  id          String         @id @default(cuid())
  title       String
  description String
  content     String         @db.Text
  order       Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  exercises   Exercise[]
  progress    UserProgress[]
}

model Exercise {
  id             String         @id @default(cuid())
  title          String
  description    String
  expectedOutput String
  expectedCode   String
  lessonId       String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  lesson         Lesson         @relation(fields: [lessonId], references: [id])
  userProgress   UserProgress[]

  @@index([lessonId])
}

model UserProgress {
  id         String   @id @default(cuid())
  userId     String
  lessonId   String
  exerciseId String
  completed  Boolean  @default(false)
  code       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  lesson     Lesson   @relation(fields: [lessonId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, lessonId, exerciseId])
  @@index([exerciseId], map: "UserProgress_exerciseId_fkey")
  @@index([lessonId], map: "UserProgress_lessonId_fkey")
}
